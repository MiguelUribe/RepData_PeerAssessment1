hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
quit
exit
info()
bye()
swirl()
swirl()
load(swirl)
library(swirl)
load(swirl)
swirl()
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, pch = 24, col = "blue")
points(may$Wind, may$Ozone, pch = 17, col = "blue")
notmay <- subset(airquality, month != 5)
notmay <- subset(airquality, month <> 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, pch = 8, col = "red")
legend("toprigth", pch=c(17,8), col=c("blue", "red"), legend = ("May","Other Months"))
legend(x="toprigth", legend = ("May","Other Months"), pch=c(17,8), col=c("blue", "red"), )
legend(x="topright", legend = ("May","Other Months"), pch=c(17,8), col=c("blue", "red"), )
legend(x="topright", legend = ("May","Other Months"), pch=c(17,8), col=c("blue", "red"), )
legend(x="topright", legend = c("May","Other Months"), pch=c(17,8), col=c("blue", "red"), )
abline(v=median(airquality$Wind), lty=2, lwd =2)
par(mfrow= c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot( airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot( airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer= TRUE)
library(swirl)
swirl()
skip
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
`
dsfds
fdsf
xyplot(price~carat|color*cut,data=diamonds,pch=20)
myxlab<-"";myylab<-"";mymain<-""
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
colorRamp(c("red", "blue"))
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun(rgb)
?fun("rgb"")
library(data.table)
?rgb
colorRampPalette(c("blue", "green"),alpha=.5)
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
show(cols)
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(vulcano, col = pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
sdsa
dfadlkfds
info()
sdfda
qqplot()
qqplot(displ)
qqplot(mpg$displ)
qqplot(mpg$displ,mpg$hwy)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv )
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
?qplot
qplot(drv, hwy, data = mpg, geom="boxplot")
qplot(drv, hwy, data = mpg, geom="boxplot", color = "manufacturer")
qplot(drv, hwy, data = mpg, geom="boxplot", color = manufacturer)
qplot(hwy,data=mpg, fill=drv)
qplot(displ, hwy, data = pmg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets =  drv ~ 1, bindwidth =2)
qplot(hwy, data = mpg, facets =  drv ~ 1, binwidth =2)
qplot(hwy, data = mpg, facets =  drv ~ 1, binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data=mpg, geom = c("point","smooth"), facets = .~drv)
ggplot(mpg, aes(displ,hwy))
g<- ggplot(mpg, aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth("lm")
(g+geom_point())+geom_smooth("lm")
(g+geom_point())+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm") + facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g+geom_point(color="pink", size = 4, alpha=.5)
g+geom_point(size = 4, alpha=.5,aes(color=drv))
g+geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv),size = 2, alpha=.5)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g<- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+geom_line(ylim=(-3,3))
g+geom_line(ylim=(-3,3))
g+geom_line(ylim=c(-3,3))
g+geom_line()+ylim(-1,3)
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim= c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method = "lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth=18497/30)
brk
counts
qplot(price, data = diamonds, binwidth=18497/30, fill=cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color=cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape= cut)
qplot(carat, price, data = diamonds, color= cut)
qplot(carat, price, data = diamonds, color= cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data = diamonds, color= cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data = diamonds, color= cut, geom=c("point", "smooth"))
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut,facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpointe <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ffplot(diamonds, aes(depth,price))
g <- ggplot(diamonds, aes(depth,price))
g+geom_point(alpha=1/3,facet_grid(cut~car2))
g+geom_point(alpha=1/3) + facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3) + facet_grid(cut~car2)+geom_smooth(method="lm", size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
Q
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~Month)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month)
)
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(swirl)
Miguel
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
swirl()
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1,pch=8, cex = 2)
points(newCx, newCy, col = cols1,pch=8, cex = 2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1,pch=9, cex = 2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19, cex=2)
plot(kmObj$centers, col=c("black","red","green"),pch=3, cex=2, lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source( "addPatt.R",local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[1] * svd1$d[1]) %*% t(svd1$v[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage( svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage( svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject)
0
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <-  hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity) )
mdist <- dist(sub1[,10:12])
hclustering <-  hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity) )
svd1 <- svd( scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1$[,10:12],maxCon)
mdist <- dist(c(sub1$[,10:12],maxCon))
mdist <- dist(c(sub1$v[,10:12],maxCon))
mdist <- dist(sub1$v[,c(10:12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,  unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-(561:562)], 6)
kClust <- kmeans(sub1, 6)
kclust
kclust <- 1
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kclust$)
dim(kclust)
dim(kClust$centers)
laying <- which(kclust$size==29)
laying <- 1
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch= 19, ylab="Walkdown Cluster")
install.packages("digest")
install.packages("yaml")
install.packages("stringi")
install.packages("dplyr")
library(dplyr)
install.packages("ggplot2")
library("ggplot2")
activity
setwd("~/GitHub/DataScience/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
activity
str(activity)
activity <-na.omit(activity)
str(activity)
by_date <- group_by(activity, date)
StepsPerDate <- summarize(by_date, sum(steps))
colnames (StepsPerDate) <- c("date", "steps")
qplot(steps, data = StepsPerDate)
Daily.Step.Mean  <- summarize(by_date, mean(steps))
Daily.Step.Mean
Daily.Step.Median  <- summarize(by_date, median(steps))
Daily.Step.Median
Daily.Step.Mean  <- mean(StepsPerDate,steps)
StepsPerDate <-na.omit(StepsPerDate)
Daily.Step.Mean  <- mean(StepsPerDate,steps)
Daily.Step.Mean  <- mean(StepsPerDate$steps)
Daily.Step.Mean
str(activity)
qplot(interval, data = activity)
by_interval <- group_by(activity, date)
MeanPerInterval <- summarize(by_interval, mean(steps))
colnames (MeanPerInterval) <- c("date", "steps.mean")
qplot(interval, steps.mean, data = MeanPerInterval)
by_interval <- group_by(activity, date)
MeanPerInterval <- summarize(by_interval, mean(steps))
colnames (MeanPerInterval) <- c("interval", "steps.mean")
qplot(interval, steps.mean, data = MeanPerInterval)
by_interval <- group_by(activity, interval)
by_interval
MeanPerInterval <- summarize(by_interval, mean(steps))
MeanPerInterval
colnames (MeanPerInterval) <- c("interval", "steps.mean")
qplot(interval, steps.mean, data = MeanPerInterval)
MeanPerInterval
qplot(interval, steps.mean, data = MeanPerInterval, geom="line")
MeanPerInterval[which.max(MeanPerInterval$steps.mean)]
MeanPerInterval
MeanPerInterval[which.max(MeanPerInterval$steps.mean)]
MeanPerInterval[which.max(MeanPerInterval$steps.mean),]
activity.NA <- activity.orignal[is.na(activity.orignal$step)]
activity.orignal <- read.csv("activity.csv")
activity.NA <- activity.orignal[is.na(activity.orignal$step)]
activity.NA <- activity.orignal[is.na(activity.orignal$steps),]
activity.NA
NROW(activity.NA)
activity.NA <- activity.orignal[is.na(activity.orignal$steps),]
Missing.rows <- NROW(activity.NA)
Missing.rows
activity.NA
activity.NA
str(activity.NA)
str(MeanPerInterval)
?merge
str(activity.NA)
new.data <- merge(activity.NA, MeanPerInterval, by.x = "interval", by.y ="interval",all.x)
str(activity.NA)
str(new.data)
new.data
new.data <- new.data(-step)
new.data <- new.data[-step,]
new.data[step,]
new.data[,step]
new.data[,new.data$step]
new.data[new.data$step,]
new.data <- merge(activity.NA, MeanPerInterval, by.x = "interval", by.y ="interval",all.x)
new.data[new.data$step,]
new.data[,new.data$step]
new.data[,new.data$steps]
new.data$steps
new.data[,new.data$steps]
subset((new.data, select = -steps)
str(new.data)
subset(new.data, select = -steps)
new.data <- subset(new.data, select = -steps)
new.data
str(new.data)
colnames(new.data) = c("interval","date","steps")
str(new.data)
str(activity)
cbind(activity,new.data)
rbind(activity,new.data)
str(activity)
str(new.data)
filled.activity <- rbind(activity,new.data)
new.data <- merge(activity.NA, MeanPerInterval, by.x = "interval", by.y ="interval",all.x)
new.data <- subset(new.data, select = -steps)
colnames(new.data) = c("interval","date","steps")
filled.activity <- rbind(activity,new.data)
str(activity)
str(new.data)
str(filled.activity)
?rbind
str(activity)
str(new.data)
str(MeanPerInterval)
new.data <- subset(new.data, select = c(steps.mean,date,interval)
str(activity)
str(new.data)
new.data <- subset(new.data, select = c(steps.mean,date,interval))
str(activity)
str(new.data)
new.data <- merge(activity.NA, MeanPerInterval, by.x = "interval", by.y ="interval",all.x)
new.data <- subset(new.data, select = c(steps.mean,date,interval))
str(new.data)
str(activity)
new.data <- merge(activity.NA, MeanPerInterval, by.x = "interval", by.y ="interval",all.x)
new.data <- subset(new.data, select = c(steps.mean,date,interval))
colnames(new.data) = c("steps","date","interval")
filled.activity <- rbind(activity,new.data)
str(activity)
str(new.data)
str(filled.activity)
Missing.rows
str(activity.orignal)
filled.by_date  <- group_by(filled.activity, date)
filled.StepsPerDate <- summarize(filled.by_date, sum(steps))
colnames (filled.StepsPerDate) <- c("date", "steps")
qplot(steps, data = filled.StepsPerDate)
Filled.Daily.Step.Mean  <- mean(Filled.StepsPerDate$steps)
Filled.Daily.Step.Mean
Filled.Daily.Step.Median  <- median(Filled.StepsPerDate$steps)
Filled.Daily.Step.Median
mean(Filled.StepsPerDate$steps)
filled.StepsPerDate
mean(filled.StepsPerDate$steps)
filled.Daily.Step.Mean  <- mean(filled.StepsPerDate$steps)
filled.Daily.Step.Mean
filled.Daily.Step.Median  <- median(filled.StepsPerDate$steps)
filled.Daily.Step.Median
filled.activity$DayType <- as.factor(ifelse(weekdays(as.date(filled.activity$date) ) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
filled.activity$DayType <- as.factor(ifelse(weekdays(as.Date(filled.activity$date) ) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
filled.activity$DayType
filled.by_interval <- group_by(filled.activity, interval)
filled.MeanPerInterval <- summarize(filled.by_interval, mean(steps))
colnames (filled.MeanPerInterval) <- c("interval", "steps.mean")
qplot(interval, steps.mean, data = filled.MeanPerInterval, geom="line")
filled.by_interval
group_by
?group_by
filled.by_DayType_interval <- group_by(filled.activity, DayType, interval)
filled.MeanPerInterval <- summarize(filled.by_DayType_interval, mean(steps))
filled.MeanPerInterval
qplot(interval, steps.mean, data = filled.MeanPerInterval, geom="line",facets = .~ DayType)
filled.MeanPerInterval
colnames (filled.MeanPerInterval) <- c("DateType", "interval", "steps.mean")
filled.MeanPerInterval
qplot(interval, steps.mean, data = filled.MeanPerInterval, geom="line",facets = .~ DayType)
filled.by_DayType_interval <- group_by(filled.activity, DayType, interval)
filled.MeanPerInterval <- summarize(filled.by_DayType_interval, mean(steps))
colnames (filled.MeanPerInterval) <- c("DayType", "interval", "steps.mean")
qplot(interval, steps.mean, data = filled.MeanPerInterval, geom="line",facets = .~ DayType)
filled.by_DayType_interval <- group_by(filled.activity, DayType, interval)
filled.MeanPerInterval <- summarize(filled.by_DayType_interval, mean(steps))
colnames (filled.MeanPerInterval) <- c("DayType", "interval", "steps.mean")
qplot(interval, steps.mean, data = filled.MeanPerInterval, geom="line",facets = DayType ~ .)
qplot(steps, data = StepsPerDate)
p <- qplot(steps, data = StepsPerDate)
p + labs(x = "Steps by day")
p
p <- qplot(steps, data = StepsPerDate)
p <- p + labs(x = "Steps by day")
p <- p + labs(x = "Frequency")
print(p)
p <- qplot(steps, data = StepsPerDate)
p <- p + labs(x = "Steps by day")
p <- p + labs(y = "Frequency")
print(p)
p <- qplot(interval, steps.mean, data = MeanPerInterval, geom="line")
p <- p + labs(x = "Steps by day", y= "")
print(p)
p <- qplot(interval, steps.mean, data = MeanPerInterval, geom="line")
p <- p + labs(title = "Average Step Count Across All Days", x = "Interval", y= "Step Count")
print(p)
qplot(steps, data = filled.StepsPerDate)
p <- qplot(steps, data = filled.StepsPerDate)
p <- p + labs(title = "", x = "Steps", y= "Frequency")
print(p)
p <-qplot(interval, steps.mean, data = filled.MeanPerInterval, geom="line",facets = DayType ~ .)
p <- p + labs(x = "interval", y= "Average Number of Steps Taken")
print(p)
